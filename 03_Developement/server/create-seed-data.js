const db = require('./db/models');

async function createSeedData() {
  try {
    console.log('üöÄ Starting to create seed data...');
    
    // Check if apartments already exist
    const existingApts = await db.Canho.findAll({ limit: 1 });
    if (existingApts.length > 0) {
      console.log('‚úÖ Apartments already exist. Checking DotThu data...');
    } else {
      console.log('üìù Creating apartments and households...');
      
      // Create apartments and households
      const firstNames = ['Nguy·ªÖn', 'Tr·∫ßn', 'L√™', 'Ph·∫°m', 'Ho√†ng', 'Phan', 'V≈©', 'V√µ', 'ƒê·∫∑ng', 'B√πi', 'ƒê·ªó', 'H·ªì', 'Ng√¥', 'D∆∞∆°ng', 'L√Ω'];
      const middleNames = ['VƒÉn', 'Th·ªã', 'Minh', 'H·ªìng', 'Quang', 'Ng·ªçc', 'Thanh', 'Tu·∫•n', 'Th√†nh', 'H·∫£i'];
      const lastNames = ['An', 'B√¨nh', 'Ch√¢u', 'Dung', 'Em', 'Giang', 'H·∫°nh', 'Kh√°nh', 'Linh', 'Minh', 'Nam', 'Oanh', 'Phong', 'Qu√Ω', 'S∆°n'];
      
      for (let floor = 2; floor <= 6; floor++) {
        for (let roomNum = 1; roomNum <= 3; roomNum++) {
          const roomNumber = `${floor}0${roomNum}`;
          const area = 60 + Math.floor(Math.random() * 40);
          
          // Create resident (head of household)
          const headFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];
          const headMiddleName = middleNames[Math.floor(Math.random() * middleNames.length)];
          const headLastName = lastNames[Math.floor(Math.random() * lastNames.length)];
          const headFullName = `${headFirstName} ${headMiddleName} ${headLastName}`;
          
          const resident = await db.NhanKhau.create({
            hoTen: headFullName,
            ngaySinh: new Date(1980 + Math.floor(Math.random() * 20), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
            gioiTinh: Math.random() > 0.5 ? 'Nam' : 'N·ªØ',
            danToc: 'Kinh',
            tonGiao: 'Kh√¥ng',
            cccd: `${Date.now()}${Math.floor(Math.random() * 1000)}`,
            ngayCap: new Date(2015, 0, 1),
            noiCap: 'C·ª•c C·∫£nh s√°t ƒêKQL c∆∞ tr√∫ v√† DLQG v·ªÅ d√¢n c∆∞',
            ngheNghiep: ['Nh√¢n vi√™n vƒÉn ph√≤ng', 'Gi√°o vi√™n', 'K·ªπ s∆∞', 'B√°c sƒ©', 'Kinh doanh'][Math.floor(Math.random() * 5)],
            soDienThoai: `09${Math.floor(Math.random() * 100000000).toString().padStart(8, '0')}`
          });
          
          // Create household
          const household = await db.HoKhau.create({
            diaChi: `Ph√≤ng ${roomNumber}, Chung c∆∞ IT4082, H√† N·ªôi`,
            ngayLap: new Date(),
            lyDoTao: 'ƒêƒÉng k√Ω thu√™ cƒÉn h·ªô',
            chuHoId: resident.id
          });
          
          // Create apartment
          await db.Canho.create({
            soPhong: roomNumber,
            tang: floor,
            dienTich: area,
            trangThai: 'da_thue',
            ghiChu: `CƒÉn h·ªô ${area}m¬≤ t·∫ßng ${floor}`,
            hoKhauId: household.id,
            chuHoId: resident.id
          });
          
          console.log(`‚úÖ Created apartment ${roomNumber} for ${headFullName}`);
        }
      }
    }
    
    // Check and create DotThu data
    const existingDotThu = await db.DotThu.findAll({ limit: 1 });
    if (existingDotThu.length > 0) {
      console.log('‚úÖ DotThu data already exists.');
    } else {
      console.log('üìù Creating DotThu and KhoanThu data...');
      
      // Create fee collection periods
      const dotThu1 = await db.DotThu.create({
        tenDotThu: 'Th√°ng 6/2025',
        ngayTao: new Date('2025-06-01'),
        thoiHan: new Date('2025-06-30')
      });
      
      const dotThu2 = await db.DotThu.create({
        tenDotThu: 'Th√°ng 5/2025',
        ngayTao: new Date('2025-05-01'),
        thoiHan: new Date('2025-05-31')
      });
      
      const dotThu3 = await db.DotThu.create({
        tenDotThu: 'Qu√Ω II/2025',
        ngayTao: new Date('2025-04-01'),
        thoiHan: new Date('2025-06-30')
      });
      
      // Create fee types
      const khoanThu1 = await db.KhoanThu.create({
        tenKhoan: 'Ph√≠ d·ªãch v·ª• chung c∆∞',
        loaiKhoan: 'PHI_DICH_VU',
        batBuoc: true,
        ghiChu: 'Ph√≠ d·ªãch v·ª• h√†ng th√°ng bao g·ªìm: v·ªá sinh, b·∫£o v·ªá, ƒëi·ªán thang m√°y'
      });
      
      const khoanThu2 = await db.KhoanThu.create({
        tenKhoan: 'Ph√≠ g·ª≠i xe',
        loaiKhoan: 'PHI_GUI_XE',
        batBuoc: true,
        ghiChu: 'Ph√≠ g·ª≠i xe t·∫°i t·∫ßng h·∫ßm'
      });
      
      const khoanThu3 = await db.KhoanThu.create({
        tenKhoan: 'Ph√≠ qu·∫£n l√Ω',
        loaiKhoan: 'PHI_QUAN_LY',
        batBuoc: true,
        ghiChu: 'Ph√≠ qu·∫£n l√Ω v·∫≠n h√†nh t√≤a nh√†'
      });
      
      const khoanThu4 = await db.KhoanThu.create({
        tenKhoan: 'Ph√≠ b·∫£o tr√¨ n√¢ng c·∫•p',
        loaiKhoan: 'PHI_BAO_TRI',
        batBuoc: false,
        ghiChu: 'Ph√≠ b·∫£o tr√¨ v√† n√¢ng c·∫•p c∆° s·ªü v·∫≠t ch·∫•t'
      });
      
      // Link fee types to periods
      await db.DotThu_KhoanThu.bulkCreate([
        // Th√°ng 6/2025
        { dotThuId: dotThu1.id, khoanThuId: khoanThu1.id, soTien: 500000 },
        { dotThuId: dotThu1.id, khoanThuId: khoanThu2.id, soTien: 200000 },
        { dotThuId: dotThu1.id, khoanThuId: khoanThu3.id, soTien: 300000 },
        { dotThuId: dotThu1.id, khoanThuId: khoanThu4.id, soTien: 500000 },
        
        // Th√°ng 5/2025
        { dotThuId: dotThu2.id, khoanThuId: khoanThu1.id, soTien: 480000 },
        { dotThuId: dotThu2.id, khoanThuId: khoanThu2.id, soTien: 180000 },
        { dotThuId: dotThu2.id, khoanThuId: khoanThu3.id, soTien: 300000 },
        
        // Qu√Ω II/2025
        { dotThuId: dotThu3.id, khoanThuId: khoanThu3.id, soTien: 900000 },
        { dotThuId: dotThu3.id, khoanThuId: khoanThu4.id, soTien: 1500000 }
      ]);
      
      console.log('‚úÖ Created DotThu and KhoanThu data successfully!');
    }
    
    // Show summary
    const totalApts = await db.Canho.count();
    const totalHouseholds = await db.HoKhau.count();
    const totalDotThu = await db.DotThu.count();
    const totalKhoanThu = await db.KhoanThu.count();
    
    console.log('\nüìä Data Summary:');
    console.log(`- Apartments: ${totalApts}`);
    console.log(`- Households: ${totalHouseholds}`);
    console.log(`- Fee Periods: ${totalDotThu}`);
    console.log(`- Fee Types: ${totalKhoanThu}`);
    
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Error creating seed data:', error);
    process.exit(1);
  }
}

createSeedData();
